//Cluster базується на child_process і є зручною обгорткою над цим базовим пакетом
//Cluster може створювати кілька процесів Node.js з одним головним процесом, що маршрутизує запити між ними. 
//Кластеризація програми дозволяє ефективно збільшити пропускну здатність сервера. Однак не можна створити окремий
//тред з модулем cluster.
//Одиничний екземпляр Node.js працює в окремому треді. Для оптимізації роботи у багатоядерних системах, 
//користувачі можуть запустити кластер процесів Node.js , щоб розділити навантаження між ядрами процесора/процесорами.
//Модуль cluster дозволяє легко створювати дочірні процеси, які поділяють серверні порти.
//https://nodejs-junior-developer-traini.gitbooks.io/super-node-js-book-2/content/klasteri.html

//Процеси воркерів породжуються методом child_process.fork (), таким чином вони можуть обмінюватись даними двосторонньо з батьківським процесом.
//Модуль cluster підтримує два методи розподілу з'єднань:
//Перший і встановлений за замовчуванням: головний процес слухає порт, приймає нові з'єднання і разділяє їх між воркерами по колу, стежачи при цьому, 
//щоб воркери не перевантажувались.
//Другий: головний процес створює та слухає сокет і шле його воркерам, воркери в свою чергу приймають з'єднання напряму.

//Другий підхід теоретично повинен давати кращу продуктивність, однак в дійсності розподіл при цьому стає дуже незбалансованим через особливості менеджера завдань 
//операційної системи. За спостереженнями 70% всіх з'єднань потрапляють в всього два з восьми процесів.


const cluster = require('cluster');
const http = require('http');
const numCPUs = require('os').cpus().length;

if (cluster.isMaster) {
  console.log(`Master ${process.pid} is running`);

  // Fork workers.
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  cluster.on('exit', (worker, code, signal) => {
    console.log(`worker ${worker.process.pid} died`);
  });
} else {
  // Workers can share any TCP connection
  // In this case it is an HTTP server
  http.createServer((req, res) => {
    console.log(`Worker ${process.pid}: Request ${req.method} : ${req.url} : ${req.headers['user-agent']}`);
    res.writeHead(200);
    res.end('hello world\n');
  }).listen(8000);

  console.log(`Worker ${process.pid} started`);
}

//Оскільки воркери - це окремі процеси, вони можуть бути видалені або перезапущені в залежності від потреб програми, не зачіпаючи решту воркерів. 
//Поки хоч один воркер продовжує працювати, сервер продовжить приймати з'єднання. Якщо більше немає працюючих воркерів, існуючі з'єднання будуть скинуті, 
//і нові не будуть прийматися. При цьому Node.js не керує кількістю воркерів. Додаток має саме займатися управлінням воркерами в залежності від своїх потреб.
//Незважаючи на те що основною сферою використання для модуля cluster є мережеві операції, він може бути використаний для інших цілей, для яких можуть знадобитися воркери.